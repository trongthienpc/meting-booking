"use server";

import { callGemini } from "@/lib/gemini";
import { ParsedBooking } from "@/types/parsedBooking";

export async function parseBookingRequest(input: string): Promise<{
  success: boolean;
  data?: {
    roomName: string;
    startTime: string;
    durationHours: number;
  };
  error?: string;
}> {
  if (!input?.trim()) {
    throw new Error("Input kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
  }

  const prompt = `
B·∫°n l√† m·ªôt h·ªá th·ªëng AI gi√∫p ph√¢n t√≠ch y√™u c·∫ßu ƒë·∫∑t ph√≤ng h·ªçp.
Ng√†y hi·ªán t·∫°i l√†: ${new Date().toLocaleString("vi-VN", {
    timeZone: "Asia/Ho_Chi_Minh",
  })}
H√£y tr√≠ch xu·∫•t th√¥ng tin t·ª´ c√¢u sau:
"${input}"

Tr·∫£ v·ªÅ k·∫øt qu·∫£ JSON theo ƒë√∫ng format:
{
  "roomName": string,
  "startTime": string (ISO 8601, gi·ªù ƒë·ªãa ph∆∞∆°ng UTC+7),
  "durationHours": number
}

L∆∞u √Ω:
- Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i sau ng√†y hi·ªán t·∫°i
- N·∫øu kh√¥ng ƒë·ªß th√¥ng tin, h√£y ƒëi·ªÅn gi√° tr·ªã null ho·∫∑c 0.
Ch·ªâ tr·∫£ l·∫°i JSON, kh√¥ng gi·∫£i th√≠ch th√™m.
  `;

  const geminiResponse = await callGemini(prompt);

  if (geminiResponse.error) {
    throw new Error(`L·ªói khi g·ªçi Gemini API: ${geminiResponse.error}`);
  }

  try {
    const rawText = geminiResponse.text.trim();

    // D√πng regex l·∫•y ph·∫ßn n·ªôi dung JSON gi·ªØa c√°c d·∫•u ```
    const match = rawText.match(/```(?:json)?\s*([\s\S]*?)\s*```/i);
    const jsonString = match ? match[1] : rawText; // N·∫øu kh√¥ng match th√¨ d√πng nguy√™n text

    // Sanitize: ch·ªâ lo·∫°i b·ªè k√≠ t·ª± ƒëi·ªÅu khi·ªÉn, gi·ªØ Unicode
    const sanitizedJson = jsonString
      .replace(/[\u0000-\u001F\u007F]/g, "")
      .trim()
      .replace(/^\s*\{/, "{") // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu d√≤ng tr∆∞·ªõc {
      .replace(/\}\s*$/, "}"); // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng cu·ªëi d√≤ng sau }

    // Parse JSON v·ªõi try-catch ri√™ng ƒë·ªÉ b·∫Øt l·ªói c√∫ ph√°p
    let parsed: ParsedBooking;
    try {
      parsed = JSON.parse(sanitizedJson);
      console.log("üöÄ ~ parseBookingRequest ~ parsed:", parsed);
    } catch (e) {
      throw new Error(`L·ªói c√∫ ph√°p JSON: ${e instanceof Error ? e.message : "Unknown error"}`);
    }

    // Validate parsed data chi ti·∫øt h∆°n
    if (!parsed.roomName || typeof parsed.roomName !== "string" || parsed.roomName.trim().length === 0) {
      throw new Error("T√™n ph√≤ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
    }

    if (!parsed.startTime || isNaN(Date.parse(parsed.startTime))) {
      throw new Error("Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ISO 8601");
    }

    // Ki·ªÉm tra th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i sau th·ªùi gian hi·ªán t·∫°i
    const currentTime = new Date();
    const startTime = new Date(parsed.startTime);
    if (startTime <= currentTime) {
      throw new Error("Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i sau th·ªùi gian hi·ªán t·∫°i");
    }

    if (typeof parsed.durationHours !== "number" || parsed.durationHours <= 0 || parsed.durationHours > 24) {
      throw new Error("Th·ªùi l∆∞·ª£ng ph·∫£i l√† s·ªë d∆∞∆°ng v√† kh√¥ng qu√° 24 gi·ªù");
    }

    return {
      success: true,
      data: {
        roomName: parsed.roomName,
        startTime: parsed.startTime,
        durationHours: parsed.durationHours,
      },
    };
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
}

export async function simpleAction() {
  console.log("Simple action called");
  return { test: "This is a simple test", timestamp: new Date().toISOString() };
}
