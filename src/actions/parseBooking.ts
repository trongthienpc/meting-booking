"use server";

import { callGemini } from "@/lib/gemini";
import { ParsedBooking } from "@/types/parsedBooking";

export async function parseBookingRequest(
  input: string
): Promise<ParsedBooking> {
  if (!input?.trim()) {
    throw new Error("Input kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
  }

  const prompt = `
B·∫°n l√† m·ªôt h·ªá th·ªëng AI gi√∫p ph√¢n t√≠ch y√™u c·∫ßu ƒë·∫∑t ph√≤ng h·ªçp.
Ng√†y hi·ªán t·∫°i l√†: ${new Date().toLocaleString("vi-VN", {
    timeZone: "Asia/Ho_Chi_Minh",
  })}
H√£y tr√≠ch xu·∫•t th√¥ng tin t·ª´ c√¢u sau:
"${input}"

Tr·∫£ v·ªÅ k·∫øt qu·∫£ JSON theo ƒë√∫ng format:
{
  "roomName": string,
  "startTime": string (ISO 8601, gi·ªù ƒë·ªãa ph∆∞∆°ng UTC+7),
  "durationHours": number
}

L∆∞u √Ω:
- Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i sau ng√†y hi·ªán t·∫°i
- N·∫øu kh√¥ng ƒë·ªß th√¥ng tin, h√£y ƒëi·ªÅn gi√° tr·ªã null ho·∫∑c 0.
Ch·ªâ tr·∫£ l·∫°i JSON, kh√¥ng gi·∫£i th√≠ch th√™m.
  `;

  const geminiResponse = await callGemini(prompt);
  console.log("üöÄ ~ geminiResponse:", geminiResponse);

  if (geminiResponse.error) {
    throw new Error(`L·ªói khi g·ªçi Gemini API: ${geminiResponse.error}`);
  }

  try {
    const rawText = geminiResponse.text.trim();

    // D√πng regex l·∫•y ph·∫ßn n·ªôi dung JSON gi·ªØa c√°c d·∫•u ```
    const match = rawText.match(/```(?:json)?\s*([\s\S]*?)\s*```/i);
    const jsonString = match ? match[1] : rawText; // N·∫øu kh√¥ng match th√¨ d√πng nguy√™n text

    // Sanitize: ch·ªâ lo·∫°i b·ªè k√≠ t·ª± ƒëi·ªÅu khi·ªÉn, gi·ªØ Unicode
    const sanitizedJson = jsonString
      .replace(/[\u0000-\u001F\u007F]/g, "")
      .trim();

    const parsed: ParsedBooking = JSON.parse(sanitizedJson);

    // Validate parsed data
    if (!parsed.roomName || typeof parsed.roomName !== "string") {
      throw new Error("T√™n ph√≤ng kh√¥ng h·ª£p l·ªá");
    }

    if (!parsed.startTime || isNaN(Date.parse(parsed.startTime))) {
      throw new Error("Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá");
    }

    if (typeof parsed.durationHours !== "number" || parsed.durationHours <= 0) {
      throw new Error("Th·ªùi l∆∞·ª£ng kh√¥ng h·ª£p l·ªá");
    }

    return parsed;
  } catch (error) {
    console.error("Parse error:", error);
    throw error instanceof Error ? error : new Error("L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu");
  }
}
